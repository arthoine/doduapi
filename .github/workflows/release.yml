name: Build and Package

on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest] # windows-latest
        arch: [amd64, arm64]
        include:
          - os: ubuntu-latest
            goos: linux
          - os: macos-latest
            goos: darwin
          - os: windows-latest
            goos: windows

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Install musl tools
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install musl-tools musl-dev --no-install-recommends -y

      - name: Setup for Windows
        if: matrix.os == 'windows-latest'
        run: |
          choco install mingw -y

      - name: Build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 1 # Ensure CGO is enabled
        run: |
          if [ "${{ matrix.goos }}" == "linux" ]; then
            if [ "${{ matrix.arch }}" == "amd64" ]; then
              CC=x86_64-linux-musl-gcc go build --ldflags '-linkmode=external -extldflags=-static' -o doduapi
            elif [ "${{ matrix.arch }}" == "arm64" ]; then
              CC=aarch64-linux-musl-gcc go build --ldflags '-linkmode=external -extldflags=-static' -o doduapi
            fi
          elif [ "${{ matrix.goos }}" == "windows" ]; then
            if [ "${{ matrix.arch }}" == "amd64" ]; then
              CC=x86_64-w64-mingw32-gcc go build -o doduapi.exe
            elif [ "${{ matrix.arch }}" == "arm64" ]; then
              CC=aarch64-w64-mingw32-gcc go build -o doduapi.exe
            fi
          elif [ "${{ matrix.goos }}" == "darwin" ]; then
            go build -o doduapi
          fi

      - name: Create Archive
        run: |
          mkdir -p dist
          if [ "${{ matrix.goos }}" == "windows" ]; then
            zip -r dist/doduapi_${{ matrix.goos }}_${{ matrix.arch }}.zip doduapi.exe LICENSE README.md migrations/
          else
            tar -czvf dist/doduapi_${{ matrix.goos }}_${{ matrix.arch }}.tar.gz doduapi LICENSE README.md migrations/
          fi

      - name: Generate Checksums
        run: |
          cd dist
          shasum -a 256 * > checksums.txt

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2

      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-artifacts
          path: dist/

      - name: Determine If Prerelease
        id: prerelease
        run: |
          if [[ "${GITHUB_REF##*/}" == *-rc* ]]; then
            echo "IS_PRERELEASE=true" >> $GITHUB_ENV
          else
            echo "IS_PRERELEASE=false" >> $GITHUB_ENV
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: ${{ env.IS_PRERELEASE }}

      - name: Set Version
        id: vars
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/doduapi_${{ matrix.goos }}_${{ matrix.arch }}.tar.gz
          asset_name: doduapi_${{ env.VERSION }}_${{ matrix.goos }}_${{ matrix.arch }}.tar.gz
          asset_content_type: application/gzip
      - name: Upload ZIP Assets (per platform)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/doduapi_${{ matrix.goos }}_${{ matrix.arch }}.zip
          asset_name: doduapi_${{ env.VERSION }}_${{ matrix.goos }}_${{ matrix.arch }}.zip
          asset_content_type: application/zip

      - name: Upload Checksums
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/checksums.txt
          asset_name: checksums.txt
          asset_content_type: text/plain
